[
  {
    "objectID": "index.html#scan-this",
    "href": "index.html#scan-this",
    "title": "Reproducible Research in Practice",
    "section": "Scan This",
    "text": "Scan This\n\n\n    \nns-rse.github.io/reproducible_research_example"
  },
  {
    "objectID": "index.html#who-am-iwhat-do-i-do",
    "href": "index.html#who-am-iwhat-do-i-do",
    "title": "Reproducible Research in Practice",
    "section": "Who Am I/What Do I Do?",
    "text": "Who Am I/What Do I Do?\n\n\n\nBackground in evolutionary and statistical genetics.\nGenetic Statistician\nMedical Statistician\nData Scientist\nðŸŽ‰ Research Software Engineer ðŸŽ‰\n\n\n\nLinux, R, Python, Bash\nLiterate Programming\nReproducible Research\nOpen Research\nFree Open Source Software\n\n\n\n\nBefore we get into the details I thought it might be useful to explain who am I am and why Iâ€™m here to talk to you today.\nI started my academic career studying Zoology and Genetics at Undergraduate then moved onto a Masters in Genetic Epidemiology, both here at the University of Sheffield quite a few years ago. After graduating I spent about eight or nine years as a Genetic Statistician trying to work out what genes are involved in complex diseases at various Universities, Manchester, Western Australia and then returning to Sheffield. I then shifted careers to work as a Medical Statistician for about nine years followed by four years in industry as a Data Scientist where I didnâ€™t actually do much data science but did learn a lot about software development which is how Iâ€™ve ended up back at the Unviversity of Sheffield as a Research Software Engineer.\nA common theme from my Masters on-wards is that I have used computers to write programmes and analyse data. Iâ€™ve taught myself Linux system administration and from a rudimentary training on Fortran, C and Stata have gone on to learn Bash, R and Python as well as a few other bits and pieces.\nVery early on in my career I developed an interest in literate programming and reproducible research which is why Aneta has invited me her today to talk to you and Iâ€™ll expand on these topics and show you some work Iâ€™m currently engaged in and how I undertake it in a reproducible manner.\nReproducible Research is one of the foundational aspects of Open Research as by ensuring our work is reproducible and open to review it improves confidence in its accuracy and reliability."
  },
  {
    "objectID": "index.html#reproducible-research",
    "href": "index.html#reproducible-research",
    "title": "Reproducible Research in Practice",
    "section": "Reproducible Research",
    "text": "Reproducible Research\n\nReproducibility is fundamental to the scientific method.\nTraditionally hand-written notebooks with methods shared in publications.\nModern equivalent is codeâ€¦\n\nSoftware\nStatistical scripts\n\nData cleaning\nAnalysis, graphs & tables"
  },
  {
    "objectID": "index.html#literate-programming---origins",
    "href": "index.html#literate-programming---origins",
    "title": "Reproducible Research in Practice",
    "section": "Literate Programming - Origins",
    "text": "Literate Programming - Origins\n\n\n\na computer program is given as an explanation of how it works in a natural language, such as English, interspersed (embedded) with snippets of macros and traditional source code, from which compilable source code can be generated.1\n\n\n\n\n\nLiterate Programming - Donald Knuth\n\n\n\n\n\nRMarkdown and other languages like it such as the newer Quarto and Emacsâ€™ Org-mode are literate programming languages which may be an unfamiliar term so Iâ€™ve borrowed the definition from Wikipedia.\nThe idea was originally proposed and developed the computer scientist Donald Knuth, and he literally wrote the book on it.\n\nWikipedia - Literate programming"
  },
  {
    "objectID": "index.html#literate-programming---better-programmes",
    "href": "index.html#literate-programming---better-programmes",
    "title": "Reproducible Research in Practice",
    "section": "Literate Programming - Better Programmes",
    "text": "Literate Programming - Better Programmes\n\n\n\nMy programs are not only explained better than ever before; they also are better programs, because the new methodology encourages me to do a better job.1\n\n\n\n\n\nLiterate Programming - Donald Knuth\n\n\n\n\n\nWhilst originating in computer science the principle has seen wide spread adoption in research and data science because it encourages reproducible research and facilitates open access to research.\nAs Knuth found when he adopted the practice it improved the quality of the programmes he wrote and Iâ€™ve found the same is true when writing documents myself since adopting the practice over 20 years ago.\n\nKnuth (1984)"
  },
  {
    "objectID": "index.html#whats-involved",
    "href": "index.html#whats-involved",
    "title": "Reproducible Research in Practice",
    "section": "Whatâ€™s Involved?",
    "text": "Whatâ€™s Involved?\n\nLogical, ordered directory structure.\nScripts/code.\nVersion control of code.\nReproducible environment (R packages using renv).\n\n\nIt can seem overwhelming learning a new paradigm or framework for undertaking work and Iâ€™ve often find that people want to get on and do the work rather than take a step back and assess how they are going about it but its well worth taking the time out to review and assess your working practices and see how they can be improved.\nIâ€™m going to walk you through a project that Iâ€™ve been working on that is looking to improve the prediction of Thyroid Cancer. Its not my own work, its the topic for a PhD for a clinicial Dr Ovie Edafe who is a specialist in neck cancers and related surgery.\nThere are four broad areas that Iâ€™ll cover that hopefully align with the content you have already covered and will be covering in the coming weeks.\nThe first step is having an organised structure to your directories having data organised in a consistent and structured manner makes it considerably easier to work with.\nYou then need to write code or scripts, which are still code, that defines the steps you undertake in cleaning and tidying your data and getting it ready for analysis before another series of scripts are used to run the analysis.\nAll of the code that is written should be version controlled which allos you to track the history of the code and see what changes have been made over time. If a mistake is made it is possible to revert back to a previous state where things did work. Version control and tools such as Git and GitHub make it much easier to collaborate with others on research too.\nOne final step is having a reproducible environment under which your work is undertaken. This means the specific versions of packages that you have used for analysis should be recorded and used again in the future. In R this can be done via the renv package. Its not without problems but the situation today is far better than it used to be."
  },
  {
    "objectID": "index.html#thyroid-cancer-prediction",
    "href": "index.html#thyroid-cancer-prediction",
    "title": "Reproducible Research in Practice",
    "section": "Thyroid Cancer Prediction",
    "text": "Thyroid Cancer Prediction\nTwo repositories on GitHub\n\nns-rse/thyroid-cancer-prediction - repository I started to show colleague how to use Git and R.\nmdp21oe/multicenter-thyroid - repository by Ovie to re-write his paper in Quarto Markdown.\n\n\n\n\n\nSlides : ns-rse.github.io/reproducible_research_example\n\n\n\n\n\n\n\n \n\n\nReproducible Research in Practice"
  }
]